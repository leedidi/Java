/*===================================
  ■■■ 연산자(Operator) ■■■
  - 비트 단위 연산자
  - 비트 shift 연산
 ===================================*/

public class Test023
{
	public static void main(String[] args)
	{                  
		             //                           |
		int x = 128; // 0000000 00000000 00000000 10000000
					 // 0000000 00000000 00000100 00000000
					 //                       |

		System.out.printf("x << 3 : %d\n", x<<3);
		System.out.printf("x * 8  : %d\n", x*8);
		//--==>> x << 3 : 1024
		//		 x * 8 : 1024

		System.out.printf("x >> 3 : %d\n", x>>3);
		System.out.printf("x / 8  : %d\n", x/8);
		//--==>> x >> 3 : 16
		//       x / 8  : 16
				      //                          |
		             // 0000000 00000000 00000000 10000000
					 // 0000000 00000000 00000000 00010000
					 //                              |

					 // >> → 비트열 이동 시 빈 자리에 양수 → 0 / 음수 → 1 ==> 부호 유지

					 // >>> → 비트열 이동 시 빈 자리에 0 (@ >> 와 짝꿍!)

					System.out.printf("x << 24 : %d\n", x<<24);
					//--==>> x << 24 : -2147493648 
					// 1000000 00000000 00000000 00000000
					// |               
					// 0000000 00000000 00000000 <10000000>
					//@-> 1 아주제일 왼쪽 초과해서 한칸더 가면 맨뒤 1로 옴
					//@ 근데 0000 ... 1<0000000> 원래 자기자리로 돌아올 떄까지는 0으로 침(32비트니까 32칸 이동!)
					//@ 1000000 00000000 00000000 00000001 0
					//@								   1  0
					//@							    1     0	
					//@							 1	      128

					System.out.printf("x << 25 : %d\n", x<<25); //0
					System.out.printf("x << 26 : %d\n", x<<26); //0
					System.out.printf("x << 31 : %d\n", x<<31); //0
					//--==>> x << 25 : 0
					//		 x << 26 : 0
					//		 x << 31 : 0


					System.out.printf("x << 32 : %d\n", x<<32);
					//--==>> x << 32 : 128
													 }
}