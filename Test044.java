/*==========================================================
  ■■■ 실행 흐름의 컨트롤(제어문, 조건문과 반복문) ■■■
  - 반복문(while문) 실습
 ==========================================================*/

// 1/2 + 2/3 + 3/4 + 4/5 + 5/6 + 6/7 + 8/9 + 9/10

//					n(n+1)
// n			→  n 은 1 ~ 9 까지 1씩 증가
// |
// 1/2 + 2/3 + 3/4 + 4/5 + 5/6 + 6/7 + 8/9 + 9/10
//   |
//   n			→  n 은 2 ~ 10 까지 1씩 증가
//                  (n-1)/n

// n/(n+1)

// 1
// 1/2 2/3 3/4 ....

// (n-1)/n

//       2    3   4
//      1/2 2/3 3/4 ....

// sum += (double)(6/7) // 6/7 한다음에 결과값 더블(실수)로 형변환X, 6만 더블로 형변환한 다음에 7로 나눔 O


//@ 같은 결과값이면 변수 개수는 적은게 좋은가...?? 더 효율적,,? 
// >> 변수 개수는 적을수록 좋음! 근데 어차피 지금처럼 단촐한 구문정도에는 변수 한두개 덜 선언, 더 선언해도
// 이걸로 판단하기에는 무리가 있음! 큰 차이 안 남 

// 실행 예)
// 연산 결과 : xxx (← 실수 기반 연산)
// 계속 하려면 아무 키나 누르세요...

/*

// [내가 작성한 코드]

public class Test044
{
	public static void main(String[] args)
	{
		// 주요 변수 선언
		int a = 1;
		double b = 2;
		double div = 0;

		// 연산 및 처리

		while (a<=9)
		{
			div += a/b;
		//	System.out.printf("\n연산 결과 : %d / %f = %f\n", a, b, div) // 계산 오류 확인용
			a++;
			b++;
			
		}
		
		// 결과 출력
		System.out.printf("연산 결과 : %f\n", div);
		
	}
}

*/

// [같이 작성한 코드]

public class Test044
{
	public static void main(String[] args)
	{
		// 주요 변수 선언 및 초기화
		int n=0;						//-- 1부터 1씩 증가하게 될 변수
		double sum=0;						//-- 누적합을 담을 변수(실수 형태) 

		// 연산 및 처리(반복문 구성)
		while (n<9)						//-- 0 1 2 3 4 5 6 7 8
		{
			// 증감식 구성
			//-- 최종적으로 반복문의 조건을 무너뜨리게 되는 열쇠가 되는 구문
			n++;						//-- 1 2 3 4 5 6 7 8 9

			//
			sum += (double)n/(n+1);		//-- 1.0/2 + 2.0/3 + 3.0/4 ... 9.0/10
			//-- 정수 기반 나눗셈 연산dml 몫을 반환하기 때문에
			//   실수 기반 연산을 수행하도록 처리하기 위해서
			//   나눗셈 연산자를 중심으로 피연산자 중 하나를
			//   실수 형태로 만들어주는 것이 중요하다.
		}
		

		// 결과 출력
		// 선생님 같은 결과값이 나오면 변수 개수는 적은게 좋은 코드인가요..??
		System.out.printf("연산 결과 : %f\n", sum);
	}
}

// 실행 결과
/*
연산 결과 : 7.071032
계속하려면 아무 키나 누르십시오 . . .
*/