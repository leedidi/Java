/*==========================================================
  ■■■ 실행 흐름의 컨트롤(제어문, 조건문과 반복문) ■■■
  - 반복문 실습
 ==========================================================*/

/*@@@@ [내가 임의로 필기한 부분]
>>>>

while(조건식) → true / false
{
	// 반복 실행 영역 //@ 조건 반복, 아직도 참이네? 계속 반복, 아 이제 거짓이네? 반복문 끝나고 } 밖으로 나감.
	    			  //※ while 문은 한번도 실행되지 않을수도 있다!
}

do //@일단 한번 수행해! >>※ do~while 문은 최소 한 번은 실행이 된다!
{
	// 반복 실행 영역
}
while()				//@ do~while문은 while문의 사촌!
					//@ 야시장 골목.....
					//@ 골목끝에 약 파는 분이 계심! ★"일단 한번 잡솨봐~"★ 그런담에 효과있으면? 또 사가서 먹어! 
																			이제별로야? 이제 그만 먹어! << 이게 do~while 문
					//@ while문은 조건에 안 맞으면 시작조차 안 하는데, do는 우선은 한번 수행함!

					//@ while 문도 아래가 한줄이면 괄호없이 쓸 수 있음
					//@ 반복문과 친해지는 방법은 반복문 근처 약간씩 바꿔보며 분석해 보는 것!
					//@ 반복문 구성시, 미리 실행해보지말고 어떻게 결과 나올지 미리 예측, 추측 후 실행해보고 맞춰보기
					//@ 다르다면 왜 그런지 분석해보기! 반복문은 일단 많이 해봐야 함!
@@@@*/

/* [선생님이 필기해주신 부분]

○ 반복문의 개요
	
	주어진 조건이 『참』인 경우
	일정 영역의 문장들을 반복 수행하다가
	조건식이 거짓이 되는 순간이 오면
	반복 수행을 중단하는 문장이다.

	이러한 반복문에는 『while』, 『do~while』, 『for』 문 등이 있으며
	반복문의 제어를 위해 『break』, 『continue』 문을
	사용하는 경우가 있다.

	
○ while 문

	조건식을 먼저 비교하여
	조건식의 처리 결과가 참인 경우, 특정 영역을 반복 수행하는 문장으로
	반복 횟수가 정해져 있지 않은 경우나
	반복 횟수가 많은 경우 주로 사용한다.
	while 문은 조건이 맞지 않은 경우
	반복은 커녕 단 한 번도 실행되지 않을 수 있다.

○ while 문의 형식 및 구조

	while(조건식)
	{
		실행문;
	}

		
*/




public class Test039
{
	public static void main(String[] args)
	{ 
		/*
		int n=0;
		while (n<=10)
		{
			System.out.println("n = " + n);
			n++; //@ 습관 들이기: 0부터~ 뚜두두두 마지막 숫자 어디까지 할거냐 어디까지 찍히냐 이미지 그려보기!
				 //@ 1,2,3....8,9,10! 앞뒤는 구체적 상상, 중간은 비교적 뭉뚱그려서 생각하기
		}
		*/
		
		/*
		int n=0;
		while (n<=10)
		{	n++;
			System.out.println("n = " + n); //@@ n= 1, =2, 3 .... 9. 10,11		
			
			}
			*/

		/*
		int n=0;
		while (n++<=10) //@적용 안된값이랑 비교후 내려와서 1 증가되서 출력(++가 뒤에 붙어있기 때문에)
		{
			System.out.println("n = " + n); //@@ n=1, 2, 3.... 11	
			
			}
		*/
		
		/*
		int n=0;		// 0	/ 10
		while (n++<=10) // 0 <=10 / 10 <=10
		{
			System.out.println("n = " + ++n); //n = 2 / 12
			
			}
		*/

		// 1부터 100까지의 합을 계산하여
		// 결과를 출력하는 프로그램을 작성한다.
		// 단, while 반복문을 사용한다.
		
		// 실행 예)
		// 1부터 100 까지의 합 : 5050
		// 계속하려면 아무 키나 누르세요...
		
		/*
		// [내가 작성한 코드]

		int n=1;
		int tot=0; //@ tot에 0 넣어야함...!!!

		while (n<=100)
		{
		tot += n;
		n++;
		}
		  System.out.println("1부터 100 까지의 합 : " + tot);
		 */
		  
		// [같이 작성한 코드]

		 // ※ 문제 인식 및 분석
		 //    1. 출력 구문이 반복문의 영역 밖에 위치해야 한다. (그래야 최종 한번만 출력)
		 //	   2. 1부터 1씩 증가할 변수와 누적합을 담을 변수
		 //		  두 개의 변수가 필요하다.

		 // 1 부터 차례로 담아 1씩 증가하는 변수 선언 및 초기화
		 int n=1;

		 // 누적합을 계산하여 담아낼 변수 선언 및 초기화
		 int sum=0; //@ (주의!) 누적합 담아낼 변수에는 보통 0 초기화 시켜줌
		 			//@ (주의!) 누적곱 담아낼 변수에는 보통 1 초기화 시켜줌

		 // 연산 및 처리(반복문 구성)
		 while (n<=100)  //@ 언젠가는 false가 와야 함. 이거 열쇠쥐고있는게 보통 n++; 같은 아이들...
		 {
			// sum 을 n 만큼 증가시켜라~!!!
			// int sum=0; //@ sum 계속 초기화, 출력에서 sum을 인식하지 못함
			 sum += n;

			 // n 이 1 씩 증가해 나가는 연산 필요~!!!
			 n++;
		 }

		// 결과 출력
		System.out.println("1 부터 100 까지의 합 : " + sum);

	}
}

//실행 결과
/*
1부터 100 까지의 합 : 5050
계속하려면 아무 키나 누르십시오 . . .
*/