/*==================================
   ■■■ 클래스와 인스턴스 ■■■
   - 생성자(Constructor)
 ===================================*/
/*
○ 생성자(Constructor)의 역할

	1. 메모리 할당
	2. 초기화

○ 생성자(Constructor)의 특징

	1. 생성자는 메소드이지만, 일반 메소드처럼 호출될 수 없으며.
	   반환 자료형을 가질 수 없다.
	   (『void』조차 가질 수 없으며, 값을 반환할 수도 없다.)
	2. 생성자는 클래스와 동일한 이름을 가져야 한다.
	   (대소문자 명확히 구분)
	3. 생성자는 객체를 생성하는 과정에서 『new 생성자();』 의 형태로 호출된다.
	   (인스터스 생성 시 단 한번만 호출)
	4. final 변수의 초기화가 가능하다.
	5. 사용자 정의 생성자가 존재하지 않을 경우
	   default 생성자가 자동으로 삽입된다.

*/

//@ 필기 쓰면서 다른생각하면서 타이핑하면 의미없다! 
//@ 필기하면서 읽어보고, 필기 끝나면 오타없는지 확인하며 한번 더 읽어보면 도움 될 거임~!!

class NumberTest
{	
	int num;

	// Default 생성자
	// -- 컴파일 과정에서 자동으로 삽입되는(생성되는) 이 생성자는
	// 사용자 정의 생성자가 존재하지 않을 경우에만 만들어진다.
	/*
	NumberTest()
	{
		// 텅 비어있는 상태
	}
	*/
	
	// 사용자 정의 생성자
	NumberTest()
	{	
		num = 10;
		System.out.println("사용자 정의 생성자 호출");
	}

	int getNum()
	{
		return num;
	}
}

// ※ 모든 클래스에는 생성자가 존재한다.
//    (사용자 정의 생성자를 따로 만들지 않았을 경우...
//     컴파일 과정에서 default 생성자가 자동으로 삽입된다.)


public class Test069
{
	public static void main(String[] args)
	{	
		// NumberTest 클래스 기반의 인스턴스 생성
		//@ 생성자는 메소드임! 근데 다른 메소드들과 달리 좀 특별한 메소드
		NumberTest nt1 = new NumberTest();
		//-- 인스턴스가 생성되는 시점에서
		//	 이와 동시에 선택의 여지 없이 생성자 호출이 이루어진다.
		//                                ------
		//                              NumberTest()

		// NumberTest nt1 = new NumberTest
		//						   +
		//						NumberTest()
	
		//nt1.NumberTest();
		//--==>> 에러 발생(컴파일 에러)

		System.out.println(nt1.getNum());
		//--==>> 0		→ 생성자 구성 이전
		//--==>> 10		→ 생성자 구성 이후

		nt1.num = 100;
		System.out.println(nt1.getNum());
		//--==>> 100

		NumberTest nt2 = new NumberTest(); // nt1, nt2 다른 보드마카! nt1에서 잉크 소진했다고 nt2에서 잉크 소진되지 않음

		int testResult = nt2.getNum(); //@ 이건 두번 호출된게 아님~! 첫번째 만들어진 객체에서 한번 호출, 두번째 만들어진 객체에서 한번 호출
									   //@ 한번에 딱 한번만 호출 가능
		System.out.println(testResult);
		//--==>> 10


	}
}

// 실행 결과
/*
사용자 정의 생성자 호출
10
100
사용자 정의 생성자 호출
10
계속하려면 아무 키나 누르십시오 . . .
*/