/*=========================
   ■■■ 만년달력 ■■■
 ==========================*/

 // 실행 예)
 // 『연도』를 입력하세요 : 2021
 // 『월』을 입력하세요   : 8
 //
 /*
	   [ 2020년 8월 ]

   일  월  화  수  목  금  토
 =============================
    1   2   3   4   5   6   7
	8   9  10  11  12  13  14
   15  16  17  18  19  20  21
   22  23  24  25  26  27  28
   29  30  31
 ============================
 계속하려면 아무 키나 누르세요...
 */

 /*
 ○ 문제 분석 및 접근
   - 서기 1년 1월 1일 : 월요일
   - 연도가 4의 배수이면서 100의 배수가 아니거나,
     400의 배수이면 2월은 29일(윤년),
	 나머지 2월 28일(평년)
   - 만약 2021년 8월 달력을 그린다고 가정하면
     1.1.1 ~ 2021.7.31 까지의 날 수를 구한다.
	 그 날 수에 『+1』 연산을 수행하면... (1.1.1 ~ 2021.8.1) 날 수 확인
	 이 날 수를 통해 2021년 8월 1일의 요일 확인
 */

 //[내가 작성한 코드]

/*
import java.util.Scanner;

public class Test101
{
	public static void main(String[] args)
	{
		int y, m, d;

		Scanner sc = new Scanner(System.in);
		System.out.print("『연도』를 입력하세요 : ");
		y = sc.nextInt();
		System.out.print("『월』을 입력하세요   : ");
		m = sc.nextInt();
		
		int[] months = {31, 0 ,31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
		//String[] weekNames = {"일", "월", "화", "수", "목", "금", "토"};

		int dsum=0;

		if (y%4==0 && y%100!= 0 || y%400 == 0)
		{
		  months[1] = 29;		// 평년
		}
		else
		  months[1] = 28;		// 윤년
		
		// ex> 2021년 8월 달력
		// 1> 1.1.1 ~ 2020 년까지의 날짜 합 구하기
		// nalsu = (y-1)*365 + (y-1)/4 - (y-1)/100 + (y-1)/400;
		dsum = (y-1)*365 + (y-1)/4 -(y-1)/100 + (y-1)/400;

		// 2> 2021.1.1 ~ 2020.7.31까지의 날짜 합 구하기

		for (int i=0; i<(m-1); i++)
		{
			dsum += months[i+1];
		}

		// 3> ~2020.7.31까지의 날짜 합에 +1 해서 8.1일이 무슨 요일인지 도출하기

		int w = (dsum+1) % 7;      // 나머지 1 > 월요일
								   // 나머지 2 > 화요일...
								   // 요일 : weekNames[w] -> 근데 이거 필요없음!


		// 달력 출력하기
		System.out.println();
		
		
		//	   [ 2020년 8월 ]

		//   일  월  화  수  목  금  토
		// =============================
		//	1   2   3   4   5   6   7
		//	8   9  10  11  12  13  14
	  //   15  16  17  18  19  20  21
	  //   22  23  24  25  26  27  28
	  //   29  30  31
		// ============================
		// 계속하려면 아무 키나 누르세요...
		 
		 
		 System.out.printf("	[ %d년 %d월 ]\n\n", y, m);
		 System.out.println("   일  월  화  수  목  금  토");
		 System.out.println(" ============================");
		 // 요일에 따라 1 시작 다르게 출력(일~토)
		 // 1 ~ 31 배열 만들고
		 // 1 위치 입력(공백 반복 하면 될거같았는데 그러면 뒤가 밀리고...)
		 // 첫줄만 따로 만들고 그뒤는 그 다음 숫자부터 배열?
			
		 int i=0;

		 // 첫줄 출력
		 for (i=1; i<=w; i++)       // w가 0 > 공백 0, w가 1 > 공백 1... w가 6이면 공백 6
		 {
			 System.out.print("    ");
		 }
		 
		
		// for (int i=1; i<8-w; i++)
		// {
		//	 System.out.printf("%4d",i);
		// }
		//System.out.println();
		//
		
		// 두번째줄 이후 출력

		for (int j=1;j<=months[m-1] ;j++ )
		{
			System.out.printf("%3d",j);

			if (( i + j + 1 )%7==0)
				System.out.println();	
		}

		/// 개행..........
		

	}
}

*/

import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.IOException;

//[함께 작성한 코드]

public class Test101
{
	public static void main(String[] args) throws IOException
	{
		//BufferedReader 인스턴스 생성
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		// 배열 선언 및 초기화
		//-- 각 달이 담고있는 마지막 날짜(매 월의 최대 날짜)
		int[] days = {31, 28 ,31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

		// 테스트
		//System.out.println("days.length : " + days.length);
		//00-->> days length : 12

		// 주요 변수 선언
		int nalsu, y, m, w;		//-- 날 수, 년 ,월, 요일

		do
		{
			System.out.print("『연도』를 입력하세요 : ");
			y = Integer.parseInt(br.readLine());
		}
		while (y<1);

		do
		{
			System.out.print("『월』을 입력하세요 : ");
			m = Integer.parseInt(br.readLine());
		}
		while (m<1 || m>12);

		//----------------------------------------------------여기까지 수행하면 유효한 연도, 월 입력한 상태

		// 입력받은 년도에 해당하는 2월의 마지막 날 계산
		if ((y%4==0 && y%100!=0) || y%400==0) //-- 윤년이라면...
		{
			days[1] = 29;
		}
		/*
		else
		{
			days[1] = 28;
		}
		*/
		//-- else 구문은
		//   현재 days 배열의 1번째 요소(즉, 2월)가 28로 구성되어 있는 상태이기 때문에
		//   생략 가능한 구문이 된다.

		// 1년 1월 1일 ~ 입력받은 년도 이전 년도의 12월 31일 까지의 날 수 계산
		nalsu = (y-1)*365 + (y-1)/4 - (y-1)/100 + (y-1)/400;

		// 입력받은 년도(해당년도) 1월 1일 ~ 입력한 월의 이전 월까지의 날 수 누적 연산
		for (int i=0; i<(m-1); i++)
			nalsu += days[i];

		// 입력받은 월의 1일을 날 수 누적 연산
		nalsu += 1;	// ++nalsu;

		//--------------------------------- 여기까지 수행히면 모든 날 수에 대한 종합 완료

		// 요일 산출
		// : 입력받은 월의 1일이 무슨 요일인지 확인하기 위한 연산
		w = nalsu %7;		//-- 0: 일요일, 1:월요일, 2: 화요일 ...

		// 테스트
		//System.out.println("w : " + w);
		//--==>> 『연도』를 입력하세요 : 2021
		//	     『월』을 입력하세요 : 8
		//		  w : 0
		//		 계속하려면 아무 키나 누르십시오 . . .
		//			→ 2021년 8월 1일이 일요일~!!!

		//-------------------------------------- 여기까지 수행하면 해당 년 월 1일이
		//										 무슨 요일인지 확인 완료


		// 출력(달력 그리기)
		System.out.println();
		System.out.printf("\t[ %d년 %d월 ]\n", y, m); //@ \t : tab으로 들여쓰기 한번 한 것
		System.out.println();
		System.out.println("  일  월  화  수  목  금  토"); // 4칸이 요일 하나(@띄어쓰기 두칸+한글 한칸(한글 한칸은 두칸차지))
		System.out.println("============================");

		// 특정 요일부터 1일이 출발할 수 있도록 공백 발생(지정)
		for (int i=1; i<=w; i++)
		{
			System.out.print("    ");	// 공백 4칸 발생
		}

		// 테스트
		//System.out.printf("%4d", 1);

		// 해당 월(입력한 월)의 날짜들이 출력될 수 있도록 반복문 구성
		for (int i=1; i<=days[m-1]; i++)
		{
			System.out.printf("%4d", i);	// 1 2 3 4 5 6 ... 31

			w++;							// 날짜를 하나씩 처리할 때 마다 요일도 하나씩 증가					

			if (w%7 == 0)					// 일요일에 해당하는 날짜일 경우
			{
				System.out.println();		// 개행
			}
			
		}
		
		// 달의 마지막 날짜가 출력 형식을 모두 채웠을 경우
		// 이미 일요일 개행이 이루어졌기 때문에
		// 이 경우는 추가 개행을 하지 않도록 처리~!!!
		if (w%7!=0) // 일요일
		{
			System.out.println();				// 개행
		}

		System.out.println("============================");
	}
}

//@ 2021년 7월, 2020년 10월 > 안나와야될 마지막줄 공백개행 생김 이거 안나오게 만들어보기 > ok
//@ 실무에서 달력 만들일 없음! 이 과정에서 로직에 익숙해지는 연습....!!!!
//@ 결론 내는게 중요한게 아니라 그 과정이 중요함~!!

// 실행 결과
/*
『연도』를 입력하세요 : 2021
『월』을 입력하세요 : 8

        [ 2021년 8월 ]

  일  월  화  수  목  금  토
============================
   1   2   3   4   5   6   7
   8   9  10  11  12  13  14
  15  16  17  18  19  20  21
  22  23  24  25  26  27  28
  29  30  31
============================
계속하려면 아무 키나 누르십시오 . . .

*/