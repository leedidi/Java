/*======================================================
  ■■■ 컬렉션 프레임워크(Collection Framework) ■■■
=======================================================*/

//@ 전체 자바 통틀어 중요도 다섯 손가락 안! 세손가락, 두손가락 안에 넣는 분도 계심..!
//@ 앞으로 자바 여러개와 연합해서 쓸 것! 그럴 때 사용...
//@ 긴장할 필요는 없음! 편한 마음으로 보기.. 
//@ 자료구조, 알고리즘은 어떤 언어를 쓰던 상관없이 계속 공부해 나가야 할 것...

//@ 내가 극장주.. 월요일 100명, 화요일 200명, 일요일 1500명 옴 -> 이 숫자들 : 이게 데이터고, 이게 자료. (사실적으로 수집된 무언가)
//                                                             ->  아 주말에 사람들이 많이 오는구나~ 이게 정보. (자료를 통해 얻은 정보)
//                                                             ---> 주말에는 극장을 오래 열어야겠군. 이게 경영에 대한 의사결정
//																									 (자료, 정보를 통해 결정한 의사결정)

/*
○ 컬렉션 프레임워크(Collection Framework)
   == 컬렉션(Collection) + 프레임워크(Framework)
      ------------------   ----------------------
	         |                환경, 틀, 약속 (←@★ 앞으로 프레임워크 나오면 이 세 가지 단어 기억하기!)
			 |				                       환경, 틀 등을 구성해주기 위한 약속
			 |
			집합 → 수집품, 소장품, (물건 또는 사람들의) 무리, 더미, 수집, 수거
                    -----------------------------------------------------------
					            모아놓은 것들... 모여있는 것들...
     ==> 자료 구조

○ 자료
   현실 세계로부터 단순한 관찰이나 측정을 통해 수집된
   사실이나 개념의 값들 또는 그 값들의 집합.

   ↓

○ 자료구조
   자료 처리를 위한 자료의 표현, 저장, 관계, 관리 및
   이용에 관한 방법 등의 개념을 이해하여 프로그램에 사용하고
   컴퓨터에 의해 처리되는 과정에서 적절한 자료의 표현, 구성, 저장 및
   처리를 위한 알고리즘의 작성 및 선택과 이용 방법을 연구하는 분야.

   //@ 주방에 각 특징을 가진 여러가지 다른 용기 존재. 이런 각각의 용기의 특성을 파악해야
   //  요리사가 손실 없이 용기에 담아 재료를 보관 가능. 이게 자료 구조...
   //  여러가지 종류의 그릇이 있고, 여기 담기위해선 내가 어떤행위, 여기서 꺼내기 위해선 어떤 행위를 해야 하느냐.. 이게 자료 구조
   //  그 자료구조를 미니어처처럼 만들어서 자바 언어 레벨 안에서 작은 세계로 녹여낸 것... 이렇게 작게 만든 그릇들이 컬렉션 프레임워크
   //  프레임워크라는 단어를 붙이기에는 너무 거창하고 낯간지럽고 얘들이 작아서... 그냥 컬렉션! 이라고도 부름

	↓

○ 컬렉션 프레임워크(Collecton Framework)
   컬렉션(모아놓은 데이터들)의 표현과 조작을 위한 통일된 아키텍처로
   컬렉션 프레임워크를 구성하는 요소는 다음과 같다.

   1. 인터페이스(Interface)
      기본적으로 컬렉션에 필요한 데이터 관리 기능을 제공한다.
	  예를 들어, list는 추가, 삭제, 검색 등의 기능을 제공하는
	  컬렉션 인터페이스가 존재하며
	  각 컬렉션마다 고유의 인터페이스가 정의되어 있다.

   2. 구현(Implementation)
      인터페이스를 구현한 클래스로
	  각 컬렉션을 실제 어떤 자료구조를 이용하여 표현했느냐에 따라
	  컬렉션의 종류가 달라지게 된다.

   3. 알고리즘(Algorithms)
      각 컬렉션들마다 유용하게 사용할 수 있는 메소드를 의미한다.

※ 자바 컬렉션은 견고한 컬렉션 프레임워크 기반 위에 정의되어 있으므로
   각 컬렉션 종류마다 제공되는 메소드의 일관성이 있기 때문에
   한 가지 컬렉션을 익혀두면 다른 컬렉션을 사용하는데 용이하다.

*/

/*
○ 스택(Stack)
//@ 자료구조 이미지화하기 쉬움...운영체제 메모리관리를 다 스택으로함... 그래서 젤먼저!
	
	Stack 클래스는 오브젝트 후입선출(LIFO) 구조의 Stcak 을 나타낸다.
	//@ 후입선출 : 나중에 들어간게 먼저 나온다. (LIFO : Last Input first Output)
	이는 벡터(Vector)를 스택으로 처리하는 5개의 메소드로
    벡터(Vector) 클래스를 확장하게 된다.
	//@ 벡터: 스택같은 클래스의 일종임!

	통상의 push() 메소드와 pop() 메소드가 제공되는 것 외에
	스택의 선두 항목으로 peek() 을 실시하는 메소드,
	스택이 비어있는지의 여부를 확인하는 메소드 isEmpty(),
	스택에서 항목을 찾아서 선두로부터 몇 번째인지를 찾아내는 메소드 등이 제공된다.

	스택이 처음으로 작성되었을 때, 항목은 존재하지 않는다.

	- boolean empty()
	  스택이 비어있는지 확인한다.
	- E Object peek()
	  스택의 맨 위의 객체를 스택에서 제거하지 않고 반환한다.
	- E Object pop()
	  스택의 맨 위의 객체를 반환하고 스택에서 제거한다.
	- E Object push(E item)
	  객체를 스택 자료구조에 저장한다.
	- int search(Object o)
	  스택의 맨 위에서부터 파라미터 값으로 넘겨받은 객체까지의 거리를 반환한다.
	  맨 위의 객체의 경우 1을 반환하고 그 아래 객체는 2를 반환하는 형식.

	  //@ 예전 객체일수록 다른이름으로 같은 기능 처리하는 것들 많을수 있음!
*/

// 제네릭, 제네릭 표현식
//@ 김치통 코너에서 김치통으로 구매했지만, 강냉이 담아놓고 먹을 수 있음 ㅋㅋ
//@ 안이 안 보이는 그릇은, 뭐 담았는지 밖에 라벨링해서 이름 써서 붙여 놓음
//@ 육류 담아서 쓸거면 육류 담을거야, 액체류~ 액체류 담을거야 써줌. 그래야 데이터에 맞게끔 지원 해 줄수 있으니까! 
//   -> 이게 제네릭, 제네릭 표현식

//@ 봐둔다 생각하기. 외우기X. 논리적으로 이해한다..정도! 구조적 디테일은 코드레벨에서 부딛혀가면서 확인

// <E>   <K, V>

import java.util.Stack;


public class Test150
{
	public static void main(String[] args)
	{
		// Stack 자료구조 생성
		//Stack<String> myStack = new Stack<String>(); ->>@ 아래에 (String) 필요X
		Stack<Object> myStack = new Stack<Object>();

		String str1 = "김진희";
		String str2 = "윤유동";
		String str3 = "이다영";
		String str4 = "이찬호";

		// myStack 이라는 Stack 자료구조 안에 str1 ~ str4 까지 담아내기
		// add(), push()
		myStack.add(str1);
		myStack.add(str2);
		myStack.push(str3);
		myStack.push(str4);

		// peek() : 스택 맨 위의 객체 반환(@알려주기만 함). 제거하지 않는다.
		String val1 = (String)myStack.peek();		//-- 형 변환 check~!!!
		System.out.println("val1 : " + val1);
		//--==>> val1 : 이찬호

		String val2 = (String)myStack.peek();
		System.out.println("val2 : " + val2);
		//--==>> val2 : 이찬호

		String val3 = (String)myStack.peek();
		System.out.println("val3 : " + val3);
		//--==>> val3 : 이찬호
		
		String value = "";

		// myStack 이라는 이름을 가진 Stack 자료구조에
		// 데이터가 비어있는 상황이 아니라면... (즉, 값이 들어있는 상태라면...)
		// isEmpty()

		// 이찬호
		// 이다영
		// 윤유동
		// 김진희
		while (!myStack.isEmpty())	// !false → true
		{	
			// pop() : 스택 맨 위의 객체 반환. 제거한다.
			value = (String)myStack.pop();	// 이찬호 이다영 윤유동 김진희 
			System.out.println("value : " + value);
		}	
		//--==>>
		/*
		value : 이찬호
		value : 이다영
		value : 윤유동
		value : 김진희
		*/
		//@ 꺼내진 순서는 역순! 
		//@ isempty, pop 객체가 쿵짝.. 데려오고 망보고 지우고 하며 쿵짝맞게 기능!!
	}
}