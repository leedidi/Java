/*==========================================================
  ■■■ 실행 흐름의 컨트롤(제어문, 조건문과 반복문) ■■■
  - 반복문 실습
 ==========================================================*/

 // 1 부터 100 까지의 정수 중에서
 // 짝수들의 합과 홀수들의 합을 따로 구분하여 계산한다.
 // 그리고 결과값을 출력하는 프로그램을 구현한다.
 // 단, 반복문은 while 문을 사용할 수 있도록 하며,
 // 조건 구문은 if 조건문을 사용하여 작성할 수 있도록 한다.

 // 실행 예)
 // 1 부터 100까지의 정수 중
 // 짝수의 합 : 2550
 // 홀수의 합 : 2500
 // 계속하려면 아무 키나 누르세요...


/*

// [내가 작성한 코드]
public class Test041
{
	public static void main(String[] args)
	{
		// 주요 변수 선언
		int n = 1;		// 정수
		int sum1 = 0;	// 정수 중 짝수의 합
		int sum2 = 0;	// 정수 중 홀수의 합

		// 연산 및 처리

		while(n<=100)
		{
			if(n%2 == 0)
			{ sum1 += n; 
			  n +=1 ;}
			 else
			{ sum2 += n;
			  n +=1 ;}
		}
		// 결과 출력
		
		System.out.println("1 부터 100까지의 정수 중");
		System.out.println("짝수의 합 : " + sum1);
		System.out.println("홀수의 합 : " + sum2);
	}
}
*/

// [같이 작성한 코드]
public class Test041
{
	public static void main(String[] args)
	{
		// 주요 변수 선언
		int n=1;	 //--1 부터 100 까지 1씩 증가할 변수
		int even=0;	 //-- 짝수들의 누적합을 담을 변수
		int odd=0;   //-- 홀수들의 누적합을 담을 변수

		// 연산 및 처리
		//@ 반복은 조건을 어케 바꾸느냐에 따라 몇번, 몇백번 반복. 반복문은, 기본적으로 리소스의 소모가 심한 편
		//@ 반복문은 가급적 덜 도는게 좋음. 반복문 1000번 돌려서 결과완료, 100번 돌려서 결과완료 > 100번 돌려서 결과완료가 더 효율적 코드
		 
	    while(n<=100)
		{
			// 처리
			// -- 짝수인지 홀수인지 판별하여 합을 누적
			if (n%2==0)		// 짝수인지 판별
			{
				even += n;
			}
			else if (n%2!=0) // 홀수인지 판별
			{
				odd += n;
			}
			else
			{
				System.out.println("판별 불가 데이터");
				return;
			}
			n++;
		}

		// 결과 출력
		System.out.println("1 부터 100 까지의 정수 중");
		System.out.println("짝수의 합 : " + even);
		System.out.println("홀수의 합 : " + odd);
	}
}




// 실행 결과
/*
1 부터 100 까지의 정수 중
짝수의 합 : 2550
홀수의 합 : 2500
계속하려면 아무 키나 누르십시오 . . .
*/