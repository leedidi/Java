/*==========================================================
  ■■■ 실행 흐름의 컨트롤(제어문, 조건문과 반복문) ■■■
  - 반복문(do~while문) 실습
 ==========================================================*/
 /*
 ○ 개요
 	
	『do~while』문은 『while』 문과 마찬가지로
	특정한 영역을 반복 수행하는 반복문이다.
	『while』문과 다른 점은
	조건식에 대한 검사를 반복문을 수행한 이후에 한다는 것이다.
	이와 같은 성격으로 인해 반드시 한 번은 수행하게 되는 특징을 갖는다.

	
 ○ 형식 및 구조

	do					//@ 약장수 아저씨! 일단한번 먹어봐.. 조건 확인도 안하고 일단 실행
	{
		실행문;
	}
	while(조건식);		//@ 그 다음에 더 할지말지 결정

 */


public class Test050
{
	public static void main(String[] args)
	{
		// ※ while 반복문을 통해 구현했던 내용들을
		//	  do~while 문을 통해서도 구현할 수 있다.
		
		/*
		int n=1;

		do
		{
				System.out.println("n = " + n);
				n++;							//@ 구문작성 끝나면 바로 컴파일 X, 아 이렇게 돌겠구나 미리 예측해보기
												//@ 러프하게 X, 구체적으로 예측해보기
		}
		while (n<=10);
		*/
		
		/*
		int n=1;

		do
		{
				n++;
				System.out.println("n = " + n); //@ 다시 추측! (@ 2~11 -- OK!)
		}
		while (n<=10);
		*/
		
		/*
		int n=0;

		do
		{
				n++;
				System.out.println("n = " + n); //@ 다시 추측! (@ 1~10 -- OK!)
		}
		while (n<10);
		*/
		
		/*
		int n=0;

		do
		{
				System.out.println("n = " + ++n); //@ 다시 추측! (@ 1~11 -- OK!)
		}
		while (n<=10);
		*/

		// @do~while 문? 주로 사용하는 경우
		//사용자에게 어떤값을 입력하세요, 했을 때 조건에 맞는 값 입력하면 해당 수행, 아닌 값 입력하면 다른 수행
		//--> 적어도 한 번은 입력해야 사용자가 어떤 값 입력했는지 알게 됨

		// ex1> 100 이상의 정수 입력 : 70
		//	    100 이상의 정수 입력 : 95
		//	    100 이상의 정수 입력 : 101
		//	    >>100 이상의 정수 입력 완료~!!!
		// ex2> 정수 입력(종료시 -1) : 50
		//		>> .....
		//      정수 입력(종료시 -1) : 70
		//		>> .....
		//      정수 입력(종료시 -1) : -1
		//		계속하려면 아무 키나 누르세요...


		// do ~ while 문의 활용 모델
		// 예를 들어... 사용자로부터 특정 범위의 수가 입력될 때 까지
		// 입력받는 행위를 반복해서 수행해야 하는 상황이라 가정한다.

		java.util.Scanner sc = new java.util.Scanner(System.in);

		int num;
		do
		{
			System.out.print("100 이상의 점수를 입력하세요 : ");
			num = sc.nextInt();
		}
		while (num<100);

		System.out.println(num + " → 100 이상의 정수 입력 완료~!!!");
 
	}
}

// 실행 결과
/*
100 이상의 점수를 입력하세요 : 101
101 → 100 이상의 정수 입력 완료~!!!
계속하려면 아무 키나 누르십시오 . . .
*/

